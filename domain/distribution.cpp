#include "distribution.h"
#include "../util.h"
#include "distributioncolumn.h"
#include "application.h"
#include <QFile>
#include <QTextStream>

Distribution::Distribution(const QString path) : File( path )
{
}


void Distribution::setInfoFromMetadataFile()
{
    QString md_file_path( this->_path );
    QFile md_file( md_file_path.append(".md") );
    QMap<uint, Roles::DistributionColumnRole> varIndex_role_pairs;
    if( md_file.exists() ){
        md_file.open( QFile::ReadOnly | QFile::Text );
        QTextStream in(&md_file);
        for (int i = 0; !in.atEnd(); ++i)
        {
           QString line = in.readLine();
           if( line.startsWith( "ROLE:" ) ){
               QString pair = line.split(":")[1];
               uint var_index = pair.split("=")[0].toUInt();
               Roles::DistributionColumnRole role_code = (Roles::DistributionColumnRole)pair.split("=")[1].toUInt();
               varIndex_role_pairs.insert( var_index, role_code );
           }
        }
        md_file.close();
        this->setInfo( varIndex_role_pairs );
    }
}

uint Distribution::getTheColumnWithValueRole() const
{
    uint result = 0;
    for ( int i = 0; i < getChildCount(); ++i ) {
        DistributionColumn *dc = (DistributionColumn*)getChildByIndex( i );
        Roles::DistributionColumnRole role = dc->getRole();
        if( role == Roles::DistributionColumnRole::VALUE ||
            role == Roles::DistributionColumnRole::LOGVALUE ){
            if( result == 0 )
                result = i + 1; //GEO-EAS file column indexes start at 1
            else //more than one column has a value role, return zero
                return 0;
        }
    }
    return result;
}

uint Distribution::getTheColumnWithProbabilityRole() const
{
    uint result = 0;
    for ( int i = 0; i < getChildCount(); ++i ) {
        DistributionColumn *dc = (DistributionColumn*)getChildByIndex( i );
        Roles::DistributionColumnRole role = dc->getRole();
        if( role == Roles::DistributionColumnRole::PVALUE ){
            if( result == 0 )
                result = i + 1; //GEO-EAS file column indexes start at 1
            else //more than one column has the probability role, return zero
                return 0;
        }
    }
    return result;
}


void Distribution::updateColumnCollection()
{
    //updates column collection
    this->_children.clear(); //TODO: deallocate elements/deep delete (minor memory leak)
    QStringList fields = Util::getFieldNames( this->_path );
    for( int i = 0; i < fields.size(); ++i ){
        int index_in_file = i + 1;
        DistributionColumn *dc = new DistributionColumn( fields[i].trimmed(), index_in_file );
        this->_children.push_back( dc );
        dc->setParent( this );
    }
}

void Distribution::setInfo(const QMap<uint, Roles::DistributionColumnRole> &varIndex_role_pairs)
{
    this->updateColumnCollection();
    QMapIterator<uint, Roles::DistributionColumnRole> i( varIndex_role_pairs );
    while (i.hasNext()) {
        i.next();
        DistributionColumn *dc = (DistributionColumn*)this->getChildByIndex( i.key()-1 );
        dc->setRole( i.value() );
    }
}

void Distribution::updateMetaDataFile()
{
    QFile file( this->getMetaDataFilePath() );
    file.open( QFile::WriteOnly | QFile::Text );
    QTextStream out(&file);
    out << APP_NAME << " metadata file.  This file is generated automatically.  Do not edit this file.\n";
    out << "version=" << APP_VERSION << '\n';
    //for each distribution file column
    for (std::vector<ProjectComponent*>::iterator it = _children.begin() ; it != _children.end(); ++it){
        DistributionColumn* dc = (DistributionColumn*)(*it);
        //the GEO-EAS index of the columns is simply its index in this collection plus one.
        out << "ROLE:" << this->getChildIndex( *it ) + 1 << "=" << (uint)dc->getRole() << "\n";
    }
    file.close();
}

void Distribution::deleteFromFS()
{
    File::deleteFromFS(); //delete the file itself.
    //also deletes the metadata file
    QFile file( this->getMetaDataFilePath() );
    file.remove(); //TODO: throw exception if remove() returns false (fails).  Also see QIODevice::errorString() to see error message.
}

void Distribution::save(QTextStream *txt_stream)
{
    (*txt_stream) << this->getFileType() << ":" << this->getFileName() << '\n';
    updateMetaDataFile();
}
