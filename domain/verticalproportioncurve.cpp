#include "verticalproportioncurve.h"

#include <QFile>
#include <QTextStream>
#include <cassert>


VerticalProportionCurve::VerticalProportionCurve(QString path, QString associatedCategoryDefinitionName) :
    DataFile( path ),
    m_associatedCategoryDefinitionName( associatedCategoryDefinitionName )
{

}

QIcon VerticalProportionCurve::getIcon()
{
    return QIcon(":icons32/vpc32");
}

QString VerticalProportionCurve::getTypeName()
{
    return "VERTICALPROPORTIONCURVE";
}

void VerticalProportionCurve::save(QTextStream *txt_stream)
{
    (*txt_stream) << this->getFileType() << ":" << this->getFileName() << '\n';
    //also saves the metadata file.
    this->updateMetaDataFile();
}

bool VerticalProportionCurve::canHaveMetaData()
{
    return true;
}

QString VerticalProportionCurve::getFileType()
{
    return getTypeName();
}

void VerticalProportionCurve::updateMetaDataFile()
{
    QFile file( this->getMetaDataFilePath() );
    file.open( QFile::WriteOnly | QFile::Text );
    QTextStream out(&file);
    out << APP_NAME << " metadata file.  This file is generated automatically.  Do not edit this file.\n";
    out << "version=" << APP_VERSION << '\n';
    if( ! m_associatedCategoryDefinitionName.isEmpty() )
        out << "ASSOCIATED_CATEGORY_DEFINITION:" << m_associatedCategoryDefinitionName << '\n';
    file.close();
}

bool VerticalProportionCurve::isDataFile()
{
    //this class only uses DataFile's ready infrastructure to read/save data.
    return false;
}

bool VerticalProportionCurve::isDistribution()
{
    return  false;
}

void VerticalProportionCurve::deleteFromFS()
{
    DataFile::deleteFromFS(); //delete the file itself.
    //also deletes the metadata file
    QFile file( this->getMetaDataFilePath() );
    file.remove(); //TODO: throw exception if remove() returns false (fails).  Also see QIODevice::errorString() to see error message.
}

bool VerticalProportionCurve::isWeight(Attribute *at)
{
    Q_UNUSED( at )
    assert( false && "VerticalProportionCurve::isWeight(): VerticalProportionCurve is a data file, "
                     "but calling isWeight() on it makes no sense." );
}

Attribute *VerticalProportionCurve::getVariableOfWeight(Attribute *weight)
{
    Q_UNUSED( weight )
    assert( false && "VerticalProportionCurve::getVariableOfWeight(): VerticalProportionCurve is a data file, "
                     "but calling getVariableOfWeight() on it makes no sense." );
}

void VerticalProportionCurve::deleteVariable(uint columnToDelete)
{
    Q_UNUSED( columnToDelete )
    assert( false && "VerticalProportionCurve::deleteVariable(): Columns of a VerticalProportionCurve are fixed and cannot"
                     " be removed." );
}

bool VerticalProportionCurve::isRegular() {
    assert( false && "VerticalProportionCurve::isRegular(): a VerticalProportionCurve is a data set, but it is not"
                     " a spatial object." );
}

double VerticalProportionCurve::getDataSpatialLocation(uint line, CartesianCoord whichCoord)
{
    Q_UNUSED( line )
    Q_UNUSED( whichCoord )
    assert( false && "VerticalProportionCurve::getDataSpatialLocation(): a VerticalProportionCurve is not a spatial object." );
}

void VerticalProportionCurve::getDataSpatialLocation(uint line, double &x, double &y, double &z)
{
    Q_UNUSED( line )
    Q_UNUSED( x )
    Q_UNUSED( y )
    Q_UNUSED( z )
    assert( false && "VerticalProportionCurve::getDataSpatialLocation(): a VerticalProportionCurve is not a spatial object." );
}

bool VerticalProportionCurve::isTridimensional()
{
    assert( false && "VerticalProportionCurve::isTridimensional(): a VerticalProportionCurve is not a spatial object." );
}
