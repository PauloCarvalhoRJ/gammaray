#include "section.h"

#include <QFile>
#include <QTextStream>

#include "domain/pointset.h"
#include "domain/cartesiangrid.h"
#include "domain/application.h"
#include "domain/project.h"

Section::Section(QString path) : File(path),
    m_PointSet( nullptr ),
    m_CartesianGrid( nullptr )
{
}

void Section::setPointSet(PointSet *pointSet)
{
    if( m_PointSet ){
        removeChild( m_PointSet );
        delete m_PointSet;
    }
    m_PointSet = pointSet;
    addChild( pointSet );
    pointSet->setParent( this );
}

void Section::setCartesianGrid(CartesianGrid *cartesianGrid)
{
    if( m_CartesianGrid ){
        removeChild( m_CartesianGrid ); //TODO: verify memory leak
        delete m_CartesianGrid;
    }
    m_CartesianGrid = cartesianGrid;
    addChild( cartesianGrid );
    cartesianGrid->setParent( this );
}

void Section::setInfoFromMetadataFile()
{
    QString md_file_path( this->_path );
    QFile md_file( md_file_path.append(".md") );
    if( md_file.exists() ){
        md_file.open( QFile::ReadOnly | QFile::Text );
        QTextStream in(&md_file);
        for (int i = 0; !in.atEnd(); ++i)
        {
           QString line = in.readLine();
           if( line.startsWith( "POINTSET:" ) ){
               QString pointSetName = line.split(":")[1];
               //The point set component must always be a sibling file.
               QString pointSetPath = Util::getParentDirectory( this->getPath() ) +
                                      '/' + pointSetName;
               if( !pointSetName.isEmpty() && Util::fileExists( pointSetPath ) ) {
                   PointSet* componentPointSet = new PointSet( pointSetPath );
                   componentPointSet->setInfoFromMetadataFile();
                   setPointSet( componentPointSet );
               }
           }else if( line.startsWith( "CARTESIANGRID:" ) ){
               QString cartesianGridName = line.split(":")[1];
               //The Cartesian grid component must always be a sibling file.
               QString cartesianGridPath = Util::getParentDirectory( this->getPath() )  +
                                      '/' + cartesianGridName;
               if( !cartesianGridName.isEmpty() && Util::fileExists( cartesianGridPath ) ) {
                   CartesianGrid* componentCartesianGrid = new CartesianGrid( cartesianGridPath );
                   componentCartesianGrid->setInfoFromMetadataFile();
                   setCartesianGrid( componentCartesianGrid );
               }
           }
        }
        md_file.close();
    }
}

void Section::deleteFromFS()
{
    File::deleteFromFS(); //delete data file

    // also deletes the metadata file
    QFile file(this->getMetaDataFilePath());
    file.remove(); // TODO: throw exception if remove() returns false (fails).  Also see
                   // QIODevice::errorString() to see error message.

    //Sections are defined by two more files: a PointSet and a CartesianGrid.
    if( m_CartesianGrid )
        m_CartesianGrid->deleteFromFS();
    if( m_PointSet )
        m_PointSet->deleteFromFS();
}

void Section::writeToFS()
{
    //A Section does not actually have data.  Its data are in the two component objects.
    if( m_CartesianGrid )
        m_CartesianGrid->writeToFS();
    if( m_PointSet )
        m_PointSet->writeToFS();
}

void Section::readFromFS()
{
    //A Section does not actually have data.  Its data are in the two component objects.
    if( m_CartesianGrid )
        m_CartesianGrid->readFromFS();
    if( m_PointSet )
        m_PointSet->readFromFS();
}

void Section::updateMetaDataFile()
{
    QFile file( this->getMetaDataFilePath() );
    file.open( QFile::WriteOnly | QFile::Text );
    QTextStream out(&file);
    out << APP_NAME << " metadata file.  This file is generated automatically.  Do not edit this file.\n";
    out << "version=" << APP_VERSION << '\n';
    out << "POINTSET:" << (this->m_PointSet ? this->m_PointSet->getName() : "") << '\n';
    out << "CARTESIANGRID:" << (this->m_CartesianGrid ? this->m_CartesianGrid->getName() : "") << '\n';
    file.close();
}

QIcon Section::getIcon()
{
    return QIcon(":icons32/section32");
}

QString Section::getObjectLocator()
{
    return _parent->getObjectLocator() + '/' + getName();
}

void Section::save(QTextStream *txt_stream)
{
    (*txt_stream) << this->getFileType() << ":" << this->getFileName() << '\n';
    //also saves the metadata file.
    this->updateMetaDataFile();
}
